scale_color_gradient(low = "blue", high = "red", name = "Count") +
theme_void() +
coord_sf() +
labs(title = "Europe Map of Studies in Smart Farming") +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
guides(color = guide_legend(override.aes = list(size = 3))) +
guides(size = FALSE)
View(merged_data)
View(merged_geojson)
View(merged_geojson)
View(centroids_df)
View(centroids_df)
View(countries)
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
rm(list=ls())
library(leaflet)
library(readxl)
library(sf)
library(RColorBrewer)
library(dplyr)
library(htmltools)
library(tidyverse)
library(ggplot2)
library(ggnewscale)
# reading file containing articles' information including country
articles <- read_excel("data/articles.xlsx")
articles
# reading GeoJSON file containing country boundaries
countries <- st_read("data/countries.geojson")
countries
# splitting multiple countries in "Country" column into separate rows
articles$Country <- strsplit(articles$Country, ", ")
# unnesting to convert array into set of rows
articles <- unnest(articles, Country)
# merging articles and countries based on country column
merged_data <- merge(articles, countries, by.x = "Country", by.y = "ADMIN", all.x = TRUE)
merged_data
# calculating frequency count of each country
country_counts <- table(merged_data$Country)
# converting frequency counts to data frame
counts_df <- data.frame(Country = names(country_counts), Count = as.numeric(country_counts))
counts_df
# merging country counts with countries GeoJSON data
merged_geojson <- merge(countries, counts_df, by.x = "ADMIN", by.y = "Country", all.x = TRUE)
merged_geojson
# getting top five countries with highest number of studies
top_countries <- counts_df %>%
arrange(desc(Count)) %>%
head(5)
# defining color palette
color_palette <- brewer.pal(9, "Greens")
# create leaflet map
map <- leaflet(data = merged_geojson) %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~colorNumeric(color_palette, domain = Count)(Count),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.9
),
label = ~paste(ADMIN, ": ", Count)) %>%
addLegend("bottomright", pal = colorNumeric(color_palette, domain = unique(counts_df$Count)), values = unique(counts_df$Count), title = "Count") %>%
addControl(html = as.character(tags$div(HTML(paste0("<h4>Top 5 Countries</h4>",
"<table>",                                                      "<thead><tr><th>Country</th><th>Count</th></tr></thead>",
"<tbody>",
paste0("<tr><td>", top_countries$Country, "</td><td>", top_countries$Count, "</td></tr>", collapse = "\n"),
"</tbody>",
"</table>")))),
position = "bottomleft") %>%
addControl(html = as.character(tags$div(id = "map-title", style = "background-color: white; padding: 10px; font-family: Arial, sans-serif; font-size: 16px; font-weight: bold;", "World map of studies in Smart Farming")),
position = "topright")
# displaying choropleth map
map
# Repair invalid geometries
merged_geojson <- st_make_valid(merged_geojson)
# Simplify country geometries
simplified_geojson <- st_simplify(merged_geojson, preserveTopology = TRUE, dTolerance = 0.01)
# Create centroids for each country
centroids <- st_centroid(simplified_geojson)
# Extract coordinates from centroids
centroids <- st_coordinates(centroids)
# Convert to data frame
centroids_df <- as.data.frame(centroids)
# Rename the columns
colnames(centroids_df) <- c("x", "y")
# Combine with the count data
centroids_df <- cbind(centroids_df, Count = simplified_geojson$Count)
# Create the bubble map
ggplot() +
geom_sf(data = countries, fill = "grey", alpha = 0.3) +
new_scale("size") +
geom_point(data = centroids_df, aes(x = x, y = y, size = Count, color = Count), alpha = 0.7) +
scale_size(range = c(1, 10), name = "Count") +
scale_color_gradient(low = "blue", high = "red", name = "Count") +
theme_void() +
coord_sf() +
labs(title = "World Map of Studies in Smart Farming") +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
guides(color = guide_legend(override.aes = list(size = 3))) +
guides(size = FALSE)
# Filter the merged_data to include only European countries
europe_data <- countries %>%
filter(ADMIN %in% c("Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Faroe Islands", "Finland", "France", "Germany", "Gibraltar", "Greece", "Guernsey", "Hungary", "Iceland", "Ireland", "Isle of Man", "Italy", "Jersey", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "North Macedonia", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Svalbard and Jan Mayen", "Sweden", "Switzerland", "Ukraine", "United Kingdom", "Vatican City"))
# Create the ggplot for Europe
ggplot() +
geom_sf(data = europe_data, fill = "grey", alpha = 0.3) +
geom_point(data = centroids_df, aes(x = x, y = y, size = Count, color = Count), alpha = 0.7) +
scale_size(range = c(1, 10), name = "Count") +
scale_color_gradient(low = "blue", high = "red", name = "Count") +
theme_void() +
coord_sf() +
labs(title = "Europe Map of Studies in Smart Farming") +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
guides(color = guide_legend(override.aes = list(size = 3))) +
guides(size = FALSE)
# Plotting bar chart of top five countries count
bar_chart <- ggplot(top_countries, aes(x = reorder(Country, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = reorder(Country, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert the 'Country' column to factor with ordered levels based on 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(top_countries$Count)])
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) gsub("([A-Za-z]+).*", "\\1", x))
# Convert the 'Country' column to factor with ordered levels based on 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(top_countries$Count)])
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Count", y = "Country") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = reorder(Country, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert the 'Country' column to factor with ordered levels based on 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(top_countries$Count)])
# Plotting bar chart of top five countries count
bar_chart <- ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "color_palette") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Convert the 'Country' column to factor with ordered levels based on descending 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(-top_countries$Count)])
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = fct_rev(Country), y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Convert the 'Country' column to factor with ordered levels based on 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(top_countries$Count)])
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
rm(list=ls())
# reading file containing articles' information including country
articles <- read_excel("data/articles.xlsx")
articles
# reading GeoJSON file containing country boundaries
countries <- st_read("data/countries.geojson")
countries
# splitting multiple countries in "Country" column into separate rows
articles$Country <- strsplit(articles$Country, ", ")
# unnesting to convert array into set of rows
articles <- unnest(articles, Country)
# merging articles and countries based on country column
merged_data <- merge(articles, countries, by.x = "Country", by.y = "ADMIN", all.x = TRUE)
merged_data
# calculating frequency count of each country
country_counts <- table(merged_data$Country)
# converting frequency counts to data frame
counts_df <- data.frame(Country = names(country_counts), Count = as.numeric(country_counts))
counts_df
# merging country counts with countries GeoJSON data
merged_geojson <- merge(countries, counts_df, by.x = "ADMIN", by.y = "Country", all.x = TRUE)
merged_geojson
# getting top five countries with highest number of studies
top_countries <- counts_df %>%
arrange(desc(Count)) %>%
head(5)
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
# Convert the 'Country' column to factor with ordered levels based on 'Count'
top_countries$Country <- factor(top_countries$Country, levels = top_countries$Country[order(top_countries$Count)])
# Plotting bar chart of top five countries count
ggplot(top_countries, aes(x = Country, y = Count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top Five Countries Count", x = "Country", y = "Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(top_countries$Count), by = 2), labels = function(x) as.character(as.integer(x)))
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = " ")
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_string <- tolower(trimws(keywords_string))
# Generate word frequencies
keyword_freq <- table(strsplit(keywords_string, "\\s+"))
# Remove common words if desired (e.g., "the", "and", "of", etc.)
# stopwords <- c("the", "and", "of", "in", "to", "for")
# keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Create a word cloud
wordcloud(names(keyword_freq), freq = keyword_freq, random.order = FALSE)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
stopwords <- c("the", "and", "of", "in", "to", "for")
keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Create a word cloud
wordcloud(names(keyword_freq), freq = keyword_freq, random.order = FALSE)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
stopwords <- c("the", "and", "of", "in", "to", "for", ";")
keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Create a word cloud
wordcloud(names(keyword_freq), freq = keyword_freq, random.order = FALSE)
library(wordcloud)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = ";")
# Split the keywords string at semicolons
keywords_split <- strsplit(keywords_string, ";", fixed = TRUE)[[1]]
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_split <- tolower(trimws(keywords_split))
# Generate word frequencies
keyword_freq <- table(keywords_split)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
# stopwords <- c("the", "and", "of", "in", "to", "for")
# keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Create a word cloud
wordcloud(names(keyword_freq), freq = keyword_freq, random.order = FALSE)
library(wordcloud)
library(extrafont)
# Set seed for reproducibility
set.seed(123)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = ";")
# Split the keywords string at semicolons
keywords_split <- strsplit(keywords_string, ";", fixed = TRUE)[[1]]
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_split <- tolower(trimws(keywords_split))
# Generate word frequencies
keyword_freq <- table(keywords_split)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
# stopwords <- c("the", "and", "of", "in", "to", "for")
# keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3)
# Create a word cloud with more words
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
library(wordcloud)
library(RColorBrewer)
library(extrafont)
# Set seed for reproducibility
set.seed(123)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = ";")
# Split the keywords string at semicolons and whitespace
keywords_split <- unlist(strsplit(keywords_string, ";\\s*|\\s+", perl = TRUE))
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_split <- tolower(trimws(keywords_split))
# Generate word frequencies
keyword_freq <- table(keywords_split)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
# stopwords <- c("the", "and", "of", "in", "to", "for")
# keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "BrBG")
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-1]  # Exclude first color
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-3]  # Exclude first color
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-4]  # Exclude first color
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3,
max.words = 300)
library(wordcloud)
library(RColorBrewer)
library(extrafont)
# Set seed for reproducibility
set.seed(123)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = ";")
# Split the keywords string at semicolons
keywords_split <- strsplit(keywords_string, ";", fixed = TRUE)[[1]]
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_split <- tolower(trimws(keywords_split))
# Generate word frequencies
keyword_freq <- table(keywords_split)
# Remove common words if desired (e.g., "the", "and", "of", etc.)
# stopwords <- c("the", "and", "of", "in", "to", "for")
# keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-(1:4)]  # Exclude first four colors
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3)
library(wordcloud)
library(extrafont)
# Set seed for reproducibility
set.seed(123)
# Create a character vector of keywords
keywords <- articles$Keywords
# Concatenate all the keywords into a single string
keywords_string <- paste(keywords, collapse = ";")
# Split the keywords string at semicolons
keywords_split <- strsplit(keywords_string, ";", fixed = TRUE)[[1]]
# Remove any leading/trailing whitespaces and convert to lowercase
keywords_split <- tolower(trimws(keywords_split))
# Generate word frequencies
keyword_freq <- table(keywords_split)
# Remove common words
stopwords <- c("the", "and", "of", "in", "to", "for")
keyword_freq <- keyword_freq[!(names(keyword_freq) %in% stopwords)]
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-(1:4)]  # Exclude first four colors
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3)
# Define color palette
colors <- brewer.pal(length(keyword_freq), "Greens")[-(1:3)]  # Exclude first four colors
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = colors,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3)
# Define color palette
color_palette <- brewer.pal(length(keyword_freq), "Greens")[-(1:3)]  # Exclude first four colors
# Create a word cloud with colors and nicer shape
wordcloud(names(keyword_freq), freq = keyword_freq,
random.order = FALSE, colors = color_palette,
scale = c(5, 1.2), rot.per = 0.3,
family = "serif", font = 3)
# create leaflet map
map <- leaflet(data = merged_geojson) %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~colorNumeric(color_palette, domain = Count)(Count),
weight = 1,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.9
),
label = ~paste(ADMIN, ": ", Count)) %>%
addLegend("bottomright", pal = colorNumeric(color_palette, domain = unique(counts_df$Count)), values = unique(counts_df$Count), title = "Count") %>%
addControl(html = as.character(tags$div(HTML(paste0("<h4>Top 5 Countries</h4>",
"<table>",                                                      "<thead><tr><th>Country</th><th>Count</th></tr></thead>",
"<tbody>",
paste0("<tr><td>", top_countries$Country, "</td><td>", top_countries$Count, "</td></tr>", collapse = "\n"),
"</tbody>",
"</table>")))),
position = "bottomleft") %>%
addControl(html = as.character(tags$div(id = "map-title", style = "background-color: white; padding: 10px; font-family: Arial, sans-serif; font-size: 16px; font-weight: bold;", "World map of studies in Smart Farming")),
position = "topright")
# displaying choropleth map
map
R.version.string
